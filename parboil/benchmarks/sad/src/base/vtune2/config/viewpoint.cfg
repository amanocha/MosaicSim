<?xml version='1.0' encoding='UTF-8'?>

<bag xmlns:exsl="http://exslt.org/common" xmlns:int="http://www.w3.org/2001/XMLSchema#int" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
 <internal name="%HotspotsByCPUUsageViewpointName" shortName="%HotspotsByCPUUsageViewpointShortName" description="%HotspotsByCPUUsageViewpointDescription">
  <int:schemaVersion>1</int:schemaVersion>
  <int:contentVersion>34</int:contentVersion>
 </internal>
 <prerequisites xsl:version="1.0" exsl:keep_exsl_namespace="" syntax="norules">
  <requiredData groupOperation="and" xsl:version="1.0" exsl:keep_exsl_namespace="" syntax="norules">
   <xsl:choose>
    <xsl:when test="exsl:is_table_exist('pmu_data')">
     <queryRef>/NotApplicableQuery</queryRef>
    </xsl:when>
    <xsl:otherwise>
     <queryRef>/CPUTime</queryRef>
     <queryRef>/CPUUsage</queryRef>
    </xsl:otherwise>
   </xsl:choose>
  </requiredData>
 </prerequisites>
 <viewpoint xsl:version="1.0" exsl:keep_exsl_namespace="">
  <pane id="bottomUpPane" placeId="resultsArea"/>
  <pane id="topDownPane" placeId="resultsArea"/>
  <pane id="callerCalleePane" placeId="resultsArea"/>
  <pane id="stackPane" placeId="sideArea"/>
  <pane id="summaryPane" placeId="resultsArea"/>
  <pane id="quickFilterPane" placeId="filterArea"/>
  <pane id="timelinePane" placeId="bottomArea"/>
  <pane id="gpuTimelinePane" placeId="bottomArea"/>
  <pane id="taskTimelinePane" placeId="resultsArea"/>
  <pane id="gpuDiagramPane" placeId="bottomArea"/>
  <xsl:variable name="StacksCollected" select="(string($enableStackCollection) != 'false') or (string($enableVTSSCollection) != 'false') or (string($collectSamplesMode) = 'stack') or (string($collectWaitsMode) = 'stack')"/>
  <displayLayout>
   <tab id="summary">
    <masterPane id="summaryPane"/>
   </tab>
   <tab id="bottomUp">
    <masterPane id="bottomUpPane"/>
    <paneToShow id="quickFilterPane"/>
    <xsl:if test="$StacksCollected">
     <paneToShow id="stackPane"/>
    </xsl:if>
    <paneToShow id="timelinePane"/>
   </tab>
   <tab id="flatProfile">
    <masterPane id="callerCalleePane"/>
    <paneToShow id="quickFilterPane"/>
   </tab>
   <tab id="topDown">
    <masterPane id="topDownPane"/>
    <paneToShow id="quickFilterPane"/>
    <xsl:if test="$StacksCollected">
     <paneToShow id="stackPane"/>
    </xsl:if>
    <paneToShow id="timelinePane"/>
   </tab>
   <tab id="tasks">
    <masterPane id="taskTimelinePane"/>
    <paneToShow id="quickFilterPane"/>
    <xsl:if test="$StacksCollected">
     <paneToShow id="stackPane"/>
    </xsl:if>
   </tab>
   <defaultTab id="summary"/>
  </displayLayout>
  <diveLayout id="srcAsmPane" placeId="resultsArea">
   <xsl:if test="$StacksCollected">
    <paneToShow id="stackPane"/>
   </xsl:if>
  </diveLayout>
 </viewpoint>
 <paneLibrary xsl:version="1.0" exsl:keep_exsl_namespace="">
  <xsl:variable name="quickFilterPane">
   <params id="quickFilterPane" groupings="/Process/Thread/Module/CPUUsageUtilization"/>
  </xsl:variable>
  <xsl:variable name="qfilterFileName">
   <xsl:text>config://viewpoint/include/filterbar.xsl?</xsl:text>
   <xsl:for-each select="exsl:node-set($quickFilterPane)//@*">
    <xsl:value-of select="concat(name(), '=', .)"/>
    <xsl:text>&amp;</xsl:text>
   </xsl:for-each>
  </xsl:variable>
  <xsl:copy-of select="document($qfilterFileName)"/>
  <xsl:variable name="stackPane">
   <params layers="CPU/Wait" metrics="CPUTime"/>
  </xsl:variable>
  <xsl:variable name="stackFileName">
   <xsl:text>config://viewpoint/include/stack.xsl?</xsl:text>
   <xsl:for-each select="exsl:node-set($stackPane)//@*">
    <xsl:value-of select="concat(name(), '=', .)"/>
    <xsl:text>&amp;</xsl:text>
   </xsl:for-each>
  </xsl:variable>
  <xsl:copy-of select="document($stackFileName)"/>
  <xsl:variable name="bottomUpPane">
   <params groupings="CPUGridRowBy" sorting="MySorting" errorMessage="ErrorNoDataHotspots" stateVersion="2"/>
  </xsl:variable>
  <xsl:variable name="bottomUpFileName">
   <xsl:text>config://viewpoint/include/grid.xsl?</xsl:text>
   <xsl:for-each select="exsl:node-set($bottomUpPane)//@*">
    <xsl:value-of select="concat(name(), '=', .)"/>
    <xsl:text>&amp;</xsl:text>
   </xsl:for-each>
  </xsl:variable>
  <xsl:copy-of select="document($bottomUpFileName)"/>
  <xsl:variable name="callerCalleePane">
   <params description="HotspotsCallerCalleeWindowDescription" stateVersion="2"/>
  </xsl:variable>
  <xsl:variable name="callerCalleeFileName">
   <xsl:text>config://viewpoint/include/caller-callee.xsl?</xsl:text>
   <xsl:for-each select="exsl:node-set($callerCalleePane)//@*">
    <xsl:value-of select="concat(name(), '=', .)"/>
    <xsl:text>&amp;</xsl:text>
   </xsl:for-each>
  </xsl:variable>
  <xsl:copy-of select="document($callerCalleeFileName)/root/*"/>
  <xsl:variable name="topDownPane">
   <params groupings="TopDownGridRowBy" sorting="MySorting" errorMessage="ErrorNoDataHotspots" id="topDownPane" displayName="TopDownTreeWindow" description="HotspotsTopDownTreeWindowDescription" helpKeyword="configs.interpret_calltree_f1030" queryType="topDown" groupingItems="no" stateVersion="2"/>
  </xsl:variable>
  <xsl:variable name="topDownFileName">
   <xsl:text>config://viewpoint/include/grid.xsl?</xsl:text>
   <xsl:for-each select="exsl:node-set($topDownPane)//@*">
    <xsl:value-of select="concat(name(), '=', .)"/>
    <xsl:text>&amp;</xsl:text>
   </xsl:for-each>
  </xsl:variable>
  <xsl:copy-of select="document($topDownFileName)"/>
  <xsl:variable name="summaryPane">
   <params description="HotspotsSummaryWindowDescription" resultSummaryColumns="MyDataColumns" querySuffix="CPU" showCPUHotspots="true" showCPUUsage="true" showCPUGPUUsage="true" showOpenMP="true" helpKeyWord="configs.summary_hs_by_cpu_usage_f1243" showFrames="true"/>
  </xsl:variable>
  <xsl:variable name="summaryFileName">
   <xsl:text>config://viewpoint/include/summary.xsl?</xsl:text>
   <xsl:for-each select="exsl:node-set($summaryPane)//@*">
    <xsl:value-of select="concat(name(), '=', .)"/>
    <xsl:text>&amp;</xsl:text>
   </xsl:for-each>
  </xsl:variable>
  <xsl:copy-of select="document($summaryFileName)"/>
  <xsl:variable name="timelinePane">
   <params id="timelinePane" displayName="TimelineWindow" globalEventAreaName="CPUUsageOverTime" description="HotspotsTimelineWindowDescription" cpuDataQuery="CPUTime" samplePointsQuery="CPUSample" samplePointsTooltipQuery="CPUFunctionFull" cpuDataCumulativeQuery="CPUTimeAllCoresCumulative" taskQuery="Task" helpKeyword="configs.timeline_f1106" contextSwitches="false" waits="true" cpuOverheadAndSpinTimeQuery="CPUOverheadAndSpinTimeCapped" cpuOverheadAndSpinTimeCumulativeQuery="CPUOverheadAndSpinTimeAllCoresCumulative" rowByPrefix="CPU"/>
  </xsl:variable>
  <xsl:variable name="timelinePaneFileName">
   <xsl:text>config://viewpoint/include/timeline.xsl?</xsl:text>
   <xsl:for-each select="exsl:node-set($timelinePane)//@*">
    <xsl:value-of select="concat(name(), '=', .)"/>
    <xsl:text>&amp;</xsl:text>
   </xsl:for-each>
  </xsl:variable>
  <xsl:copy-of select="document($timelinePaneFileName)"/>
  <xsl:variable name="taskTimelinePane">
   <params id="taskTimelinePane" displayName="TaskTimelineWithData" description="TaskTimelineWithDataDescription" tasksAndFrames="true" globalEventAreaName="CPUUsageOverTime" cpuDataQuery="CPUTime" cpuDataCumulativeQuery="CPUTimeAllCoresCumulative" contextSwitches="false" frameMode="frameDetailed" headerMode="rich" helpKeyword="configs.tasks_f1330" rowByPrefix="CPU"/>
  </xsl:variable>
  <xsl:variable name="taskTimelinePaneFileName">
   <xsl:text>config://viewpoint/include/timeline.xsl?</xsl:text>
   <xsl:for-each select="exsl:node-set($taskTimelinePane)//@*">
    <xsl:value-of select="concat(name(), '=', .)"/>
    <xsl:text>&amp;</xsl:text>
   </xsl:for-each>
  </xsl:variable>
  <xsl:copy-of select="document($taskTimelinePaneFileName)"/>
  <xsl:variable name="gpuTimelinePane">
   <params id="gpuTimelinePane" displayName="GPUTimelineWindow" globalEventAreaName="CPUUsageOverTime" description="HotspotsAndGPUTimelineWindowDescription" cpuDataQuery="CPUTime" samplePointsQuery="CPUSample" samplePointsTooltipQuery="CPUFunctionFull" cpuDataCumulativeQuery="CPUTimeAllCoresCumulative" taskQuery="Task" helpKeyword="configs.graphics_f1337" contextSwitches="false" gpu="true" gpuCounters="{$gpuCounters}" cpuOverheadAndSpinTimeQuery="CPUOverheadAndSpinTimeCapped" cpuOverheadAndSpinTimeCumulativeQuery="CPUOverheadAndSpinTimeAllCoresCumulative" rowByPrefix="CPU"/>
  </xsl:variable>
  <xsl:variable name="gpuTimelinePaneFileName">
   <xsl:text>config://viewpoint/include/timeline.xsl?</xsl:text>
   <xsl:for-each select="exsl:node-set($gpuTimelinePane)//@*">
    <xsl:value-of select="concat(name(), '=', .)"/>
    <xsl:text>&amp;</xsl:text>
   </xsl:for-each>
  </xsl:variable>
  <xsl:copy-of select="document($gpuTimelinePaneFileName)"/>
  <xsl:variable name="srcAsmPaneFileName">
   <xsl:text>config://viewpoint/include/srcasm.xsl?family=CPU&amp;gpu=true&amp;</xsl:text>
  </xsl:variable>
  <xsl:copy-of select="document($srcAsmPaneFileName)"/>
  <xsl:copy-of select="document('config://viewpoint/include/diagram.xsl')"/>
 </paneLibrary>
 <queryLibrary xsl:version="1.0" exsl:keep_exsl_namespace="">&gt;  <vectorQuery id="MyDataColumns">
   <queryRef>/CPUGPUUsageElapsedTime/CPUGPUUsageUtilization</queryRef>
   <xsl:choose>
    <xsl:when test="exsl:ctx('collectWaitsMode', 'off') = 'off'">
     <queryRef>/CPUTimeParent</queryRef>
    </xsl:when>
    <xsl:otherwise>
     <queryRef>/CPUTimeParentExpanded</queryRef>
    </xsl:otherwise>
   </xsl:choose>
   <queryRef>/WaitTime/CPUUsageUtilization</queryRef>
  </vectorQuery>
  <vectorQuery id="ViewpointGUIandCLIColumns">
   <vectorQueryInsert>/RegionDataQueries</vectorQueryInsert>
   <vectorQueryInsert>/MyDataColumns</vectorQueryInsert>
   <vectorQueryInsert>/CommonDataQueries</vectorQueryInsert>
   <vectorQueryInsert>/GPUInfoQueries</vectorQueryInsert>
   <vectorQueryInsert>/GPUDataQueries</vectorQueryInsert>
   <vectorQueryInsert>/GridInfoQueriesTail</vectorQueryInsert>
  </vectorQuery>
  <vectorQuery id="MySorting">
   <queryRef>/DataOfInterest</queryRef>
  </vectorQuery>
  <vectorQuery id="DataOfInterest">
   <queryRef>/CPUTime</queryRef>
  </vectorQuery>
  <vectorQuery id="MySrcAsmColumns">
   <vectorQueryInsert>/MyDataColumns</vectorQueryInsert>
  </vectorQuery>
 </queryLibrary>
</bag>
